---

- name: Copy the bootstrap user management script
  copy: src=manage_bootstrap_user.py dest={{ galaxy_server_dir }}/manage_bootstrap_user.py owner={{ galaxy_user_name }}

- name: Create Galaxy bootstrap user
  command: >
    chdir={{ galaxy_server_dir }} {{ galaxy_venv_dir }}/bin/python manage_bootstrap_user.py
    -c {{ galaxy_config_file }} create
    -e {{ galaxy_tools_admin_user }}
    -u {{ galaxy_tools_admin_username }}
    -p {{ galaxy_tools_admin_user_password }}
    {% if galaxy_tools_admin_user_preset_api_key|bool %}
    -a {{ galaxy_tools_api_key }}
    {% endif %}
  register: api_key
  when: (create_user is defined) and create_user

- name: Check/Set bootstrap user as Galaxy Admin if admin_users tag is already in the config file
  replace: dest={{ galaxy_config_file }} regexp="^[ ]*admin_users[ ]*=[ ]*" replace="admin_users = {{ galaxy_tools_admin_user }},"  #"
  register: admin_users_found
  when: (create_user is defined) and create_user

- name: Set bootstrap user as Galaxy Admin
  lineinfile: dest={{ galaxy_config_file }} state=present insertafter="app:main" regexp="^[ ]*admin_users[ ]*=[ ]*" line="admin_users = {{ galaxy_tools_admin_user }}"  #"
  when: (create_user is defined) and create_user and (admin_users_found.msg == "")
  notify:
    - restart galaxy

- meta: flush_handlers
  when: (create_user is defined) and create_user and (admin_users_found.msg == "")

- name: Delete Galaxy bootstrap user
  command: chdir={{ galaxy_server_dir }} {{ galaxy_venv_dir }}/bin/python manage_bootstrap_user.py -c {{ galaxy_config_file }} delete -u {{ galaxy_tools_admin_username }}
  when: (delete_user is defined) and delete_user
  notify:
    - restart galaxy

- name: Remove bootstrap user as Galaxy Admin if admin_users tag was already in the config file before bootstrap_user task
  replace: dest={{ galaxy_config_file }} regexp="admin_users = {{ galaxy_tools_admin_user }}," replace="admin_users = "  #"
  register: admin_users_found
  when: (delete_user is defined) and delete_user

- name: Remove bootstrap user as Galaxy Admin
  lineinfile: dest={{ galaxy_config_file }} state=absent insertafter="app:main" regexp="admin_users =" line="admin_users = {{ galaxy_tools_admin_user }}"  #"
  when: (delete_user is defined) and delete_user and (admin_users_found.msg == "")

- name: Remove the bootstrap user management script
  file: dest={{ galaxy_server_dir }}/manage_bootstrap_user.py state=absent

# This needs to come last or it will short-circuit execution when the galaxy_tools_api_key fact is set
- set_fact: galaxy_tools_api_key="{{ api_key.stdout_lines[0] }}"  #"
  when: create_user is defined and create_user
